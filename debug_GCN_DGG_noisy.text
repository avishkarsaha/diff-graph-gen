step 0	- any noise totally breaks GCN_DGG

200522
- citeseer, GCN with 0% noise ---> 70% acc
                    50% noise ---> 63% acc
                   100% noise ---> 63% acc
            GCN_DGG with 0% noise ---> 72% acc
                       0.1% noise ---> 18% acc	noise reduces variance of features at each conv layer
                         1% noise ---> 18% acc
            -log
            	- going to check adj with and without noise
			- FIXED: loaded adj had some self loops, now removed
		- GCN_DGG breaks even when DGG bypassed
		- error seems to be somewhere with pre normalized adj
                - GCN also breaks when noise added and adj not pre-normalized
		- the pre normalisation adds self loops, which are then added again in the network
  		  this effectively down weights noisy edges as the diagonal elements are amplified
		  after normalising.
		- so both GCN and GCN_DGG break the same way without the pre-normalized adj
		  (where the diagonal is not larger than the other edges)
		- however GCN_DGG also breaks when the diagonal is larger, which means
		  it is doing something wrong in terms of the diagonal as it should be able
		  to keep its edge probability high
		- with no noise, GCN_DGG is able to keep the diagonal weights at about 43%
		  of the node's total edge weights, although at input it is 75%
		- with 1% of noise this breaks down to 3% WHY?
		  its the edge prob net - the input adj has a mean node degree of 3, output is 30
		  so a load of unecessary edges are turning into 1. why isnt this happening
		  when theres no noise? sum dist between u-v is about 1000, with 1% noise its about 10000
		  mean dist with 1% noise is about 0.1 at epoch 20, 0.06 at the same point
		- its going wrong with 1% noise because len(u) in edge prob net is 125000, but should
		  only be 12500, as total number of edges only increases by 1%. SORT THIS OUT
		
		with normalisation
		n edges before self loops  tensor(3187.4783, device='cuda:0')
		in diag w 0.70337 0.11617
		n edges total tensor(6514.4785, device='cuda:0') len(edges) = 12431
		in deg 1.95806 0.20456
		n edges 12431
		
		without normalisation
		n edges total 00 tensor(9104., device='cuda:0')
		in diag w 0.35947 0.15924
		n edges total tensor(12431., device='cuda:0') 12431
		in deg 3.73640 3.38135
		n edges 12431
